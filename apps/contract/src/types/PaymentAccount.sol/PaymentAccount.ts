/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PaymentAccount {
  export type OrderStruct = {
    orderId: BigNumberish;
    sender: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    description: string;
  };

  export type OrderStructOutput = [
    orderId: bigint,
    sender: string,
    token: string,
    amount: bigint,
    timestamp: bigint,
    description: string
  ] & {
    orderId: bigint;
    sender: string;
    token: string;
    amount: bigint;
    timestamp: bigint;
    description: string;
  };
}

export interface PaymentAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chairman"
      | "changeChairman"
      | "getOrder"
      | "getOrdersByDateRange"
      | "getTokenBalance"
      | "getTotalOrders"
      | "getUserOrders"
      | "getUserOrdersWithDetails"
      | "orderCounter"
      | "orders"
      | "payETH"
      | "payToken"
      | "tokenBalances"
      | "userOrders"
      | "withdrawETH"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ChairmanChanged" | "PaymentReceived" | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(functionFragment: "chairman", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeChairman",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrdersByDateRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOrders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOrdersWithDetails",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "payETH", values: [string]): string;
  encodeFunctionData(
    functionFragment: "payToken",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userOrders",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "chairman", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeChairman",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrdersByDateRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOrdersWithDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace ChairmanChangedEvent {
  export type InputTuple = [oldChairman: AddressLike, newChairman: AddressLike];
  export type OutputTuple = [oldChairman: string, newChairman: string];
  export interface OutputObject {
    oldChairman: string;
    newChairman: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReceivedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    sender: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    orderId: bigint,
    sender: string,
    token: string,
    amount: bigint,
    description: string
  ];
  export interface OutputObject {
    orderId: bigint;
    sender: string;
    token: string;
    amount: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, to: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentAccount extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentAccount;
  waitForDeployment(): Promise<this>;

  interface: PaymentAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chairman: TypedContractMethod<[], [string], "view">;

  changeChairman: TypedContractMethod<
    [newChairman: AddressLike],
    [void],
    "nonpayable"
  >;

  getOrder: TypedContractMethod<
    [orderId: BigNumberish],
    [PaymentAccount.OrderStructOutput],
    "view"
  >;

  getOrdersByDateRange: TypedContractMethod<
    [startTime: BigNumberish, endTime: BigNumberish],
    [PaymentAccount.OrderStructOutput[]],
    "view"
  >;

  getTokenBalance: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getTotalOrders: TypedContractMethod<[], [bigint], "view">;

  getUserOrders: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getUserOrdersWithDetails: TypedContractMethod<
    [user: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [PaymentAccount.OrderStructOutput[]],
    "view"
  >;

  orderCounter: TypedContractMethod<[], [bigint], "view">;

  orders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, string] & {
        orderId: bigint;
        sender: string;
        token: string;
        amount: bigint;
        timestamp: bigint;
        description: string;
      }
    ],
    "view"
  >;

  payETH: TypedContractMethod<[description: string], [void], "payable">;

  payToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;

  tokenBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userOrders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawETH: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chairman"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeChairman"
  ): TypedContractMethod<[newChairman: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [orderId: BigNumberish],
    [PaymentAccount.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrdersByDateRange"
  ): TypedContractMethod<
    [startTime: BigNumberish, endTime: BigNumberish],
    [PaymentAccount.OrderStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalOrders"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserOrders"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserOrdersWithDetails"
  ): TypedContractMethod<
    [user: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [PaymentAccount.OrderStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "orderCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, string] & {
        orderId: bigint;
        sender: string;
        token: string;
        amount: bigint;
        timestamp: bigint;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "payETH"
  ): TypedContractMethod<[description: string], [void], "payable">;
  getFunction(
    nameOrSignature: "payToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userOrders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ChairmanChanged"
  ): TypedContractEvent<
    ChairmanChangedEvent.InputTuple,
    ChairmanChangedEvent.OutputTuple,
    ChairmanChangedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReceived"
  ): TypedContractEvent<
    PaymentReceivedEvent.InputTuple,
    PaymentReceivedEvent.OutputTuple,
    PaymentReceivedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "ChairmanChanged(address,address)": TypedContractEvent<
      ChairmanChangedEvent.InputTuple,
      ChairmanChangedEvent.OutputTuple,
      ChairmanChangedEvent.OutputObject
    >;
    ChairmanChanged: TypedContractEvent<
      ChairmanChangedEvent.InputTuple,
      ChairmanChangedEvent.OutputTuple,
      ChairmanChangedEvent.OutputObject
    >;

    "PaymentReceived(uint256,address,address,uint256,string)": TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;
    PaymentReceived: TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;

    "Withdrawal(address,uint256,address)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
